
; ============================================================================
;                DVI (HDMI) PIO serializer (2 instructions)
; ============================================================================
; CLK_SYS = 252 MHz
;   1 symbol has 10 bits: 40 ns (10 clock cycles)
;   1 word with 2 symbols: 80 ns (20 clock cycles)
;   full FIFO with 8 words: 640 ns (160 clock cycles)

.program dvi
.side_set	2	; 2-bit output
.origin		0	; must be compiled from 0

.wrap_target					; wrap jump target
	out	pc,1	side 0b10
	out	pc,1	side 0b01
.wrap						; wrap jump to .wrap_target

.program dvi_inv ; inverted output
.side_set	2	; 2-bit output
.origin		0	; must be compiled from 0

.wrap_target					; wrap jump target
	out	pc,1	side 0b01
	out	pc,1	side 0b10
.wrap						; wrap jump to .wrap_target

; ============================================================================
;            Mini-VGA PIO with HSYNC+VSYNC, 16 bits (21 instructions)
; ============================================================================
; Control word (right shifted):
;  - bit 0..26 (27 bits) loop counter N
;  - bit 27..31 (5 bits) jump address
; Clocks per pixel: minimum 2, maximum 9

; Resolution 320x240 (real 640x480): timings 5 clock cycles per pixel

; Number of pixels must be multiple of 2.

.program minivga
.side_set	2	; HSYNC and VSYNC output (2 bits)
.origin		2

.define NOSYNC	0	; no sync, output image or blanking
.define HSYNC	1	; HSYNC pulse (or CSYNC pulse)
.define VSYNC	2	; VSYNC pulse
.define VHSYNC	3	; HSYNC and VSYNC pulse
.define BPP	16	; number of bits per pixel

; ===== [3 instructions] HSYNC pulse, N=delay in clock cycles - 3
; starts HSYNC at time 0

public hsync:
	jmp	x--,hsync	side HSYNC	; [N+1] loop
public entry:					; program entry point
	out	x,27		side HSYNC	; [1] get next loop counter N
	out	pc,5		side HSYNC	; [1] jump to next function

; ===== [3 instructions] VSYNC pulse, N=delay in clock cycles - 3
; starts VSYNC at time 0

public vsync:
	jmp	x--,vsync	side VSYNC	; [N+1] loop
	out	x,27		side VSYNC	; [1] get next loop counter N
	out	pc,5		side VSYNC	; [1] jump to next function

; ===== [3 instructions] VSYNC and HSYNC pulse, N=delay in clock cycles - 3
; starts HSYNC and VSYNC at time 0

public vhsync:
	jmp	x--,vhsync	side VHSYNC	; [N+1] loop
	out	x,27		side VHSYNC	; [1] get next loop counter N
	out	pc,5		side VHSYNC	; [1] jump to next function

; ===== [4 instructions] DARK pulse, N=delay in clock cycles-4
; sets blanking at time 0, starts NOSYNC at time 0

public dark:
	mov	pins,null	side NOSYNC	; [1] dark output
dark_loop:
	jmp	x--,dark_loop	side NOSYNC	; [N+1] loop
.wrap_target					; wrap jump target
	out	x,27		side NOSYNC	; [1] get next loop counter N
	out	pc,5		side NOSYNC	; [1] jump to next function

; ===== [3 instructions] output pixels and dark, N=number of pixels-1, + 3 dark clock cycles
; number of pixels must be multiple of: 1 at BP=32, 2 at BPP=16, 4 at BPP=8, 8 at BPP=4, 16 at BPP=2, 32 at BPP=1
; Output first pixel at time 0; adds additional 3 clock cycles of blanking after last pixel

public output:
public extra:
	out	pins,BPP	side NOSYNC [3]	; [1+CPP-2] output pixel (set extra wait CPP-2; CPP=2..9)
	jmp	x--,output	side NOSYNC	; [1] loop (N+1 pixels)
	mov	pins,null	side NOSYNC	; [1] dark output
.wrap						; wrap jump to .wrap_target

; ===== [5 instructions] output pixels and dark with V-sync, N=number of pixels-1, + 3 dark clock cycles
; number of pixels must be multiple of: 1 at BP=32, 2 at BPP=16, 4 at BPP=8, 8 at BPP=4, 16 at BPP=2, 32 at BPP=1
; Output first pixel at time 0; adds additional 3 clock cycles of blanking after last pixel

public voutput:
public vextra:
	out	pins,BPP	side VSYNC [3]	; [1+CPP-2] output pixel (set extra wait CPP-2; CPP=2..9)
	jmp	x--,voutput	side VSYNC	; [1] loop (N+1 pixels)
	mov	pins,null	side VSYNC	; [1] dark output
	out	x,27		side VSYNC	; [1] get next loop counter N
	out	pc,5		side VSYNC	; [1] jump to next function

; ============================================================================
;                Mini-VGA PIO with CSYNC, 16 bits (21 instructions)
; ============================================================================
; Control word (right shifted):
;  - bit 0..26 (27 bits) loop counter N
;  - bit 27..31 (5 bits) jump address
; Clocks per pixel: minimum 2, maximum 9

; Resolution 320x240 (real 640x480): timings 5 clock cycles per pixel

; Number of pixels must be multiple of 2.

.program minivga_csync
.side_set	1	; HSYNC and VSYNC output (2 bits)
.origin		2

.define NOSYNC	0	; no sync, output image or blanking
.define HSYNC	1	; HSYNC pulse (or CSYNC pulse)
.define VSYNC	1	; VSYNC pulse
.define VHSYNC	0	; HSYNC and VSYNC pulse
.define BPP	16	; number of bits per pixel

; ===== [3 instructions] HSYNC pulse, N=delay in clock cycles - 3
; starts HSYNC at time 0

public hsync:
	jmp	x--,hsync	side HSYNC	; [N+1] loop
public entry:					; program entry point
	out	x,27		side HSYNC	; [1] get next loop counter N
	out	pc,5		side HSYNC	; [1] jump to next function

; ===== [3 instructions] VSYNC pulse, N=delay in clock cycles - 3
; starts VSYNC at time 0

public vsync:
	jmp	x--,vsync	side VSYNC	; [N+1] loop
	out	x,27		side VSYNC	; [1] get next loop counter N
	out	pc,5		side VSYNC	; [1] jump to next function

; ===== [3 instructions] VSYNC and HSYNC pulse, N=delay in clock cycles - 3
; starts HSYNC and VSYNC at time 0

public vhsync:
	jmp	x--,vhsync	side VHSYNC	; [N+1] loop
	out	x,27		side VHSYNC	; [1] get next loop counter N
	out	pc,5		side VHSYNC	; [1] jump to next function

; ===== [4 instructions] DARK pulse, N=delay in clock cycles-4
; sets blanking at time 0, starts NOSYNC at time 0

public dark:
	mov	pins,null	side NOSYNC	; [1] dark output
dark_loop:
	jmp	x--,dark_loop	side NOSYNC	; [N+1] loop
.wrap_target					; wrap jump target
	out	x,27		side NOSYNC	; [1] get next loop counter N
	out	pc,5		side NOSYNC	; [1] jump to next function

; ===== [3 instructions] output pixels and dark, N=number of pixels-1, + 3 dark clock cycles
; number of pixels must be multiple of: 1 at BP=32, 2 at BPP=16, 4 at BPP=8, 8 at BPP=4, 16 at BPP=2, 32 at BPP=1
; Output first pixel at time 0; adds additional 3 clock cycles of blanking after last pixel

public output:
public extra:
	out	pins,BPP	side NOSYNC [3]	; [1+CPP-2] output pixel (set extra wait CPP-2; CPP=2..9)
	jmp	x--,output	side NOSYNC	; [1] loop (N+1 pixels)
	mov	pins,null	side NOSYNC	; [1] dark output
.wrap						; wrap jump to .wrap_target

; ===== [5 instructions] output pixels and dark with V-sync, N=number of pixels-1, + 3 dark clock cycles
; number of pixels must be multiple of: 1 at BP=32, 2 at BPP=16, 4 at BPP=8, 8 at BPP=4, 16 at BPP=2, 32 at BPP=1
; Output first pixel at time 0; adds additional 3 clock cycles of blanking after last pixel

public voutput:
public vextra:
	out	pins,BPP	side VSYNC [3]	; [1+CPP-2] output pixel (set extra wait CPP-2; CPP=2..9)
	jmp	x--,voutput	side VSYNC	; [1] loop (N+1 pixels)
	mov	pins,null	side VSYNC	; [1] dark output
	out	x,27		side VSYNC	; [1] get next loop counter N
	out	pc,5		side VSYNC	; [1] jump to next function
